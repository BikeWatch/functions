openapi: 3.0.1
info:
  title: BikeLess
  description: BikeLess is the Serverless function platform, powering BikeWatch. The concoction of Azure Functions, Cosmos DB and JavaScript result in a high-performance & scalable Serverless API.
  version: 1.0.0
externalDocs:
  description: Find out more about BikeWatch
  url: https://git.ti.howest.be/TI/2021-2022/s5/cloud-and-internet-of-things/projects/group-10
servers:
- url: https://localhost:7071/api
- url: https://bikewatch-functions.azurewebsites.net/api
tags:
- name: Data-In
  description: All endpoints relating to consuming & editing data
- name: Data-Out
  description: All endpoints relating to reading data
- name: Data-Continuous
  description: All endpoints that returns a continuous stream of data
paths:
  /StoreTelemetric:
    post:
      tags:
      - Data-In
      summary: Upload Telemetric data
      operationId: telemetricIn
      requestBody:
        $ref: "#/components/requestBodies/TelemetricIn"
      responses:
        201:
          $ref: "#/components/responses/Created"
        400:
          $ref: "#/components/responses/BadRequestBag"
        500:
          $ref: "#/components/responses/InternalServerError"
  /Distance:
    get:
      tags:
        - Data-Out
      summary: Get total distance value
      description: "Returns a value that represents the total distance that a user has travelled between 2 set points"
      parameters:
        - $ref: "#/components/parameters/UUID"
        - $ref: "#/components/parameters/FromDate"
        - $ref: "#/components/parameters/ToDate"
      responses:
        200:
          description: OK
          content:
            text/plain; charset=utf-8:
              schema:
                $ref: "#/components/schemas/DataIntegerResponse"
        412:
          $ref: "#/components/responses/PreconditionFailed"
        400:
          $ref: "#/components/responses/BadRequestBag"
        500:
          $ref: "#/components/responses/InternalServerErrorCaveats"
  /Angle/{mode}:
      get:
        tags:
          - Data-Out
        summary: Get calculated angle value
        description: "Returns a singular value that is calculated by calling this endpoint." 
        operationId: calcAngle
        parameters:
          - $ref: "#/components/parameters/Mode"
          - $ref: "#/components/parameters/UUID"
          - $ref: "#/components/parameters/FromDate"
          - $ref: "#/components/parameters/ToDate"
        responses:
          200:
            description: OK
            content:
              text/plain; charset=utf-8:
                schema:
                  $ref: "#/components/schemas/DataIntegerResponse"
          412:
            $ref: "#/components/responses/PreconditionFailed"
          400:
            $ref: "#/components/responses/BadRequestBag"
          500:
            $ref: "#/components/responses/InternalServerErrorCaveats"
  /Elevation/{mode}:
    get:
      tags:
        - Data-Out
      summary: Get calculated elevation value
      description: "Returns a singular value that is calculated by calling this endpoint." 
      operationId: calcElevation
      parameters:
        - $ref: "#/components/parameters/Mode"
        - $ref: "#/components/parameters/UUID"
        - $ref: "#/components/parameters/FromDate"
        - $ref: "#/components/parameters/ToDate"
      responses:
        200:
          description: OK
          content:
            text/plain; charset=utf-8:
              schema:
                $ref: "#/components/schemas/DataIntegerResponse"
        412:
          $ref: "#/components/responses/PreconditionFailed"
        400:
          $ref: "#/components/responses/BadRequestBag"
        500:
          $ref: "#/components/responses/InternalServerErrorCaveats"
  /Speed/{mode}:
    get:
      tags:
        - Data-Out
      summary: Get calculated elevation value
      description: "Returns a singular value that is calculated by calling this endpoint." 
      operationId: calcSpeed
      parameters:
        - $ref: "#/components/parameters/Mode"
        - $ref: "#/components/parameters/UUID"
        - $ref: "#/components/parameters/FromDate"
        - $ref: "#/components/parameters/ToDate"
      responses:
        200:
          description: OK
          content:
            text/plain; charset=utf-8:
              schema:
                $ref: "#/components/schemas/DataIntegerResponse"
        412:
          $ref: "#/components/responses/PreconditionFailed"
        400:
          $ref: "#/components/responses/BadRequestBag"
        500:
          $ref: "#/components/responses/InternalServerErrorCaveats"
  /continuous/{resource}:
    get:
      tags:
        - Data-Continuous
      summary: Returns timestamped resource data
      description: "Returns an array of resource entries, each with their according timestamp. The range & interval can be customized with the use of query parameters"
      operationId: continuousSpeed
      parameters:
        - $ref: "#/components/parameters/ResourceMode"
        - $ref: "#/components/parameters/UUID"
        - $ref: "#/components/parameters/FromDate"
        - $ref: "#/components/parameters/ToDate"
        - $ref: "#/components/parameters/Interval"
      responses:
        200:
          description: "OK \n \n *Note that the displayed value is just 1 example. Every response has the same structure, but might have other keywords. Click on the 'Schema' section to see all possible structures*" 
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ContinuousSpeed"
                  - $ref: "#/components/schemas/ContinuousElevation"
                  - $ref: "#/components/schemas/ContinuousLocation"
        412:
          $ref: "#/components/responses/PreconditionFailed"
        400:
          $ref: "#/components/responses/BadRequestBag"
        500:
          $ref: "#/components/responses/InternalServerErrorCaveats"
    
components:
  requestBodies:
    TelemetricIn:
      description: An object, consisting of the UUID of the RFID/NFC card & an array with telemetric data entries.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              uuid:
                $ref: "#/components/schemas/UUID"
              telemetric:
                type: array
                items:
                  $ref: "#/components/schemas/Telemetric"
  schemas:
    # Composed schemas
    Telemetric:
      description: A object containing several telemetric data units retrieved from the BikeWatch IoT device
      type: object
      properties:
        speed:
          $ref: "#/components/schemas/Speed"
        roll:
          $ref: "#/components/schemas/Roll"
        pitch:
          $ref: "#/components/schemas/Pitch"
        lat:
          $ref: "#/components/schemas/Latitude"
        long:
          $ref: "#/components/schemas/Longitude"
        alt:
          $ref: "#/components/schemas/Altitude"
        date:
          $ref: "#/components/schemas/Date"
        time:
          $ref: "#/components/schemas/Time"
    SuccessResponse:
      description: The standard response body received when a call is successfully executed
      type: object
      properties:
        code:
          type: number
          format: integer
        keyword:
          type: string
        message:
          type: string
    FailureResponse:
      description: The standard body received when a call isn't able to be executed
      type: object
      properties:
        code:
          type: number
          format: integer
        keyword:
          type: string
        message:
          type: string
      example:
        code: 400
        keyword: "Bad Request"
        message: "One or multiple of the required parameters are missing: uuid, from, to"
    FailureResponseBag:
      description: The standard body received when a call isn't able to be executed
      type: object
      properties:
        code:
          type: number
          format: integer
        keyword:
          type: string
        message:
          type: string
        bag:
          type: array
          items:
            type: string
      example:
        code: 400
        keyword: "Bad Request"
        message: "Some keys are missing"
        bag:
          - "At entry 1, the key 'date' is missing"
          - "At entry 2, the key 'alt' is missing"
    ContinuousSpeed:
      description: The standard body response when requesting a continuous stream of timestamped speed entries
      type: array
      items:
        type: object
        properties:
          speed:
            $ref: "#/components/schemas/Speed"
          dateTime:
            $ref: "#/components/schemas/DateTime"
    ContinuousLocation:
      description: The standard body response when requesting a continuous stream of timestamped location entries
      type: array
      items:
        type: object
        properties:
          long:
            $ref: "#/components/schemas/Longitude"
          lat:
            $ref: "#/components/schemas/Latitude"
          dateTime:
            $ref: "#/components/schemas/DateTime"
    ContinuousElevation:
      description: The standard body response when requesting a continuous stream of timestamped elevation entries
      type: array
      items:
        type: object
        properties:
          alt:
            $ref: "#/components/schemas/Altitude"
          dateTime:
            $ref: "#/components/schemas/DateTime"
  
    # Atomic schemas
    UUID:
      description: An unique identifier, used by RFID/NFC cards. Needed in order to authenticate & associate telemetric data.
      type: string
      pattern: "[0-9A-Za-z]{2}-[0-9A-Za-z]{2}-[0-9A-Za-z]{2}-[0-9A-Za-z]{2}"
      example: "bc-87-72-17"
    Speed:
      description: The speed of the device, measured in KM/H.
      type: number
      format: float
      example: 20.2
    Roll:
      description: The roll of the device, measured in degrees.
      type: number
      format: int32
      example: 5
    Latitude:
      description: The latitude of the device, as used in the **projected coordinate reference system (PCRS)**.
      type: number
      format: float
      example: 50.956378
    Longitude:
      description: The longitude of the device, as used in the **projected coordinate reference system (PCRS)**.
      type: number
      format: float
      example: 2.884949
    Altitude:
      description: The altitude of the device, expressed in meters.
      type: number
      format: float
      example: 8.20
    Date:
      description: A date *(I'll be quite honest, I don't really know what you want me to write here)*
      type: string
      pattern: '^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\d\d$'
      example: "12/28/2021"
    Time:
      description: A time, formatted in the ISO format.
      type: string
      format: time
      pattern: '^([01][0-9]|2[0-4])([^0-9]?([0-5][0-9]))?([^0-9]?([0-5][0-9]))?(\.([0-9]{1,6}))?$'
      example: "11:14:09.00"
    DateTime:
      description: A DateTime string, in ISO format
      type: string
      format: dateTime
      example: "2022-01-28T10:13:00Z"
    Pitch:
      description: The pitch of the device, measured in degrees.
      type: number
      format: int32
      example: 3
    ComputationMode:
      description: "The mode that the data should be calculated with: \n * `Max`: Retrieve the maximum value\n * `Avg`: Retrieve the average value"
      type: string
      enum: [Max, Avg]
    IntervalInteger:
      description: The interval, expressed in seconds
      type: integer
      format: int32
      minimum: 1
      example: 3
    DataIntegerResponse:
      description: The standard body received when a call returns a simple integer data type
      type: number
      format: float
      example: 22.5
    ResourceTarget:
      description: Keyword that specifies which resource should be returned
      type: string
      enum: [Speed, Location, Elevation]
    
  responses:
    Created:
      description: Entity/Entities have been created
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponse"
          example:
            code: 201
            keyword: "Created"
            message: "16 entities have been successfully inserted"
    BadRequest:
      description: The request is badly formatted.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FailureResponse"
    BadRequestBag:
      description: The request is wrongly formatted.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FailureResponseBag"
          
    PreconditionFailed:
      description: "A precondition has failed. \n *This is probably referring to given parameters that results in non-feasible calculations*" 
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FailureResponseBag"
          example:
            code: 412
            keyword: "Precondition Failed"
            message: "The 'from' date is greater then the 'to' date."
            bag:
              - "This will result resulting in a bug in the space-time paradox. 🌌"
              - "Have fun, space cowboy. 🤠"
    InternalServerError:
      description: "Internal server error. \n \n Azure will just return nothing and because it's handled by the underlying C# framework, we cannot catch & adjust the response of this. ¯\\\_(ツ)\_/¯. Keep this in mind"
    InternalServerErrorCaveats:
      description: "Internal Server Error. \n \n **Note:** Because Azure functions, written in JavaScript, cannot catch any extension binding parameters, it is **impossible** to give a fitting error message. This can appear when:\n * The UUID is non-existant and causes Cosmos DB to be unable to reach the associated container. \n * One of the mandatory parameters is missing."
  parameters:
    # Path Parameters
    Mode:
      in: path
      name: mode
      schema:
        $ref: "#/components/schemas/ComputationMode"
      required: true
    # Query Parameters
    UUID:
      in: query
      name: uuid
      schema:
        $ref: "#/components/schemas/UUID"
      required: true
      description: The UUID of a RFID/NFC card
    FromDate:
      in: query
      name: from
      schema:
        $ref: "#/components/schemas/DateTime"
      required: true
      description: The earliest date that may appear, formatted in ISO style.
    ToDate:
      in: query
      name: to
      schema:
        $ref: "#/components/schemas/DateTime"
      required: true
      description: The latest date that may appear, formatted in ISO style.
    Interval:
      in: query
      name: interval
      schema:
        $ref: "#/components/schemas/IntervalInteger"
      required: true
      description: The time interval the date should adhere to, expressed in seconds
    ResourceMode:
      in: path
      name: resource
      schema:
        $ref: "#/components/schemas/ResourceTarget"
      required: true
      description: The resource that should be requested
